import { resolve } from 'node:path'
import { writeFile } from 'node:fs/promises'
import fg from 'fast-glob'
import { findLatestNews, timeToString } from './news-helpers.mjs'

/**
 * @param {string} newsFolder
 * @param {string} year
 * @return {Promise<void>}
 */
async function generateYearNews(newsFolder, year) {
  const items = await findLatestNews(newsFolder, year)

  const newsContent = `---
editLink: false
---
<!-- DO NOT EDIT THIS PAGE IT IS AUTOGENERATED -->

# Iconify Updates ${year}

${items.map(item => `
## ${item.title} \`[news-time] ${timeToString(item.time, false)}\` {#${item.link}}

${item.content}
`).join('\n')}
`
  await writeFile(resolve(newsFolder, `${year}.md`), newsContent, 'utf-8')
}

/**
 * @param {string} newsFolder
 * @param {string[]} years
 * @return {Promise<void>}
 */
function generateNewsIndex(newsFolder, years) {
  const newsList = `---
editLink: false
---
<!-- DO NOT EDIT THIS PAGE IT IS AUTOGENERATED -->
# Iconify Updates

Iconify updates can be found in the following pages:

${years.sort().reverse().map(y => `- [Year ${y}](./${y})`).join('\n')}

<latest-news />
`

  return writeFile(resolve(newsFolder, 'index.md'), newsList, 'utf-8')
}

/**
 * @param {string} rootFolder
 * @param {string} newsFolder
 * @param {string[]} years
 * @return {Promise<void>}
 */
async function generateLatestNews(rootFolder, newsFolder, years) {
  /** @type {import('./news.d.ts').ParsedNewsItem[]} */
  const latestNews = []
  /** @type {string} */
  let entryName
  for (const year of years.sort().reverse()) {
    if (latestNews.length >= 5)
      break

    const news = await findLatestNews(newsFolder, year)
    for (let i = 0; i < news.length && latestNews.length < 5; i++)
      latestNews.push(news[i])
  }

  const latestNewsContent = `<!-- DO NOT EDIT THIS COMPONENT IT IS AUTOGENERATED -->
## Latest updates

<div class="latest-news">
${latestNews.map(item => `<p><span>${timeToString(item.time, true)}</span><a href="/news/${item.year}.html#${item.link}">${item.title}</a></p>`).join('\n')}
</div>
`
  await writeFile(resolve(rootFolder, '.vitepress/theme/components/LatestNews.md'), latestNewsContent, 'utf-8')
}

/**
 * @param {string} rootFolder
 * @param {string[]} years
 * @return {Promise<void>}
 */
function generateNewsNavbar(rootFolder, years) {
  const newsNavigationContent = `// DO NOT EDIT THIS MODULE IT IS AUTOGENERATED
import type { DefaultTheme } from 'vitepress'

export const NewsSidebar: DefaultTheme.SidebarItem[] = [
  ${years.sort().reverse().map(y => `{ text: 'Year ${y}', link: '/news/${y}.md' }`).join(',\n  ')},
]
`

  return writeFile(resolve(rootFolder, '.vitepress/nav/news.ts'), newsNavigationContent, 'utf-8')
}

const rootFolder = process.cwd()
const newsFolder = resolve(rootFolder, 'news')

/** @type {string[]} */
const years = await fg('*', { cwd: newsFolder, deep: 1, onlyDirectories: true })

await Promise.all([
  generateNewsIndex(newsFolder, years),
  generateNewsNavbar(rootFolder, years),
  generateLatestNews(rootFolder, newsFolder, years),
  ...years.map(y => generateYearNews(newsFolder, y)),
])
